package org.tis.tools.webapp.controller.jnl;//
///**
// * auto generated
// * Copyright (C) 2016 bronsp.com, All rights reserved.
// */
//package org.tis.tools.webapp.controller.jnl;
//
//import java.util.ArrayList;
//import java.util.HashMap;
//import java.util.List;
//import java.util.Map;
//
//import javax.servlet.http.HttpServletRequest;
//import javax.servlet.http.HttpServletResponse;
//
//import org.apache.commons.lang.StringUtils;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Controller;
//import org.springframework.ui.ModelMap;
//import org.springframework.web.bind.annotation.RequestBody;
//import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RequestMethod;
//import org.tis.tools.base.Page;
//import org.tis.tools.base.WhereCondition;
//import org.tis.tools.model.po.log.LogTxTrace;
//import org.tis.tools.rservice.log.basic.ILogTxTraceRService;
//import org.tis.tools.webapp.controller.BaseController;
//import org.tis.tools.webapp.util.AjaxUtils;
//import org.tis.tools.webapp.util.JSONUtils;
//
//import net.sf.json.JSONArray;
//import net.sf.json.JSONObject;
//
///**
// * //TODO shiyunlai 用作freemark生成controller.java时的模版
// * @author generated by tools:gen-dao
// */
//@Controller
//@RequestMapping(value = "/log")
//public class LogTxTraceControllerTemplate extends BaseController {
//
//	//@Reference(group="jnl",version="1.0",interfaceClass=IlogTxTraceRService.class)
//	@Autowired
//	ILogTxTraceRService logTxTraceRService ; 
//
//	/**
//	 * <pre>
//	 * 功能：修改或新增${LogTxTrace}
//	 * 1、如果content中包括guid，则修改guid对应的记录；
//	 * 2、否则，新增content记录；
//	 * 
//	 * 接口三件套：
//	 * <table border="1">
//	 * <tr>
//	 * <td>调用URL</td>
//	 * <td>POST http://ip:port/[application]/jnl/txtrace/edit</td>
//	 * </tr>
//	 * <tr>
//	 * <td>请求数据</td>
//	 * <td>{ "item":"{LogTxTrace's json}"}</td>
//	 * </tr>
//	 * <tr>
//	 * <td>响应数据</td>
//	 * <td> { "data":"{LogTxTrace's json}"}</td>
//	 * </tr>
//	 * <td/>
//	 * </table>
//	 * </pre>
//	 * 
//	 * @param model
//	 * @param content
//	 *            通过http协议的body传输${LogTxTrace}（单记录）的json数据</br>
//	 *            json格式： { "item":"{LogTxTrace's json}"}
//	 * @param request
//	 * @param response
//	 * @return 试图名称
//	 */
//	@RequestMapping(value = "/txtrace/edit", method = RequestMethod.POST )
//	public String updateOrAddLogTxTrace(ModelMap model, @RequestBody String content,
//			HttpServletRequest request, HttpServletResponse response) {
//		try {
//			JSONObject jsonObj = JSONObject.fromObject(content);
//			JSONObject job = jsonObj.getJSONObject("item");
//			LogTxTrace p = new LogTxTrace();
//			JSONObject.toBean(job,p,jsonConfig);
//			if (StringUtils.isNotEmpty(p.getGuid())) {
//				logTxTraceRService.update(p);
//			} else {
//				String id = sequenceService.generateId("LogTxTrace");
//				p.setGuid(id);
//				logTxTraceRService.insert(p);
//			}
//			AjaxUtils.ajaxJson(response, JSONObject.fromObject(p).toString());
//		} catch (Exception e) {// TODO
//			logger.error("in updateOrAddLogTxTrace , content is : " + content);
//			AjaxUtils.ajaxJsonErrorMessage(response, "修改/新增失败!");
//			e.printStackTrace();
//		}
//		return null;
//	}
//
//	/**
//	 * <pre>
//	 * URL： POST http://ip:port/[application]/jnl/txtrace/delete
//	 * 功能：删除一条或多条${LogTxTrace}记录
//	 * </pre>
//	 * 
//	 * @param model
//	 * @param content
//	 *            通过http协议的body传输${LogTxTrace}的json数组</br>
//	 *            格式： [{guid : "xxxxx" , ... }, {guid : "yyyyy", ...}, ....]
//	 * @param requesttxtrace
//	 * @param response
//	 * @return 试图名称
//	 */
//	@RequestMapping(value = "/txtrace/delete", method = RequestMethod.POST)
//	public String deleteLogTxTraces(ModelMap model, @RequestBody String content,
//			HttpServletRequest request, HttpServletResponse response) {
//		try {
//			JSONArray jsonArray = JSONArray.fromObject(content);
//			List<LogTxTrace> list = new ArrayList<LogTxTrace>();
//			for (int i = 0; i < jsonArray.size(); i++) {
//				LogTxTrace p = new LogTxTrace();
//				JSONObject.toBean(JSONObject.fromObject(jsonArray.get(i)),p,jsonConfig);
//				list.add(p);
//			}
//			List<String> ids = new ArrayList<String>();
//			for (LogTxTrace p : list) {
//				ids.add(p.getGuid());
//			}
//			WhereCondition wc = new WhereCondition();
//			wc.andIn("id", ids);
//			logTxTraceRService.deleteByCondition(wc);
//			AjaxUtils.ajaxJson(response, "");
//		} catch (Exception e) {// TODO
//			logger.error("in deleteLogTxTraces , content is : " + content);
//			AjaxUtils.ajaxJsonErrorMessage(response, "删除失败!");
//			e.printStackTrace();
//		}
//		return null;
//	}
//
//	/**
//	 * 
//	 * @param model
//	 * @param content
//	 * @param request
//	 * @param response
//	 * @return
//	 */
//	@RequestMapping(value = "/txtrace/list", method = RequestMethod.POST)
//	public String execute1(ModelMap model, @RequestBody String content,
//			HttpServletRequest request, HttpServletResponse response) {
//		try {
//			JSONObject jsonObj = JSONObject.fromObject(content);
//			// 分页对象
//			Page page = getPage(jsonObj);
//			// 服务端排序规则
//			String orderGuize = getOrderGuize(JSONUtils.getStr(jsonObj, "orderGuize"));
//			// 组装查询条件
//			WhereCondition wc = new WhereCondition();
//			wc.setLength(page.getItemsperpage());
//			wc.setOffset((page.getCurrentPage() - 1) * page.getItemsperpage());
//			wc.setOrderBy(orderGuize);
//			initWanNengChaXun(jsonObj, wc);// 万能查询
//			List list = logTxTraceRService.query(wc);
//			JSONArray ja = JSONArray.fromObject(list,jsonConfig);
//			page.setTotalItems(logTxTraceRService.count(wc));
//			Map map = new HashMap();
//			map.put("page", page);
//			map.put("list", ja);
//			String s=JSONObject.fromObject(map,jsonConfig).toString();
//			AjaxUtils.ajaxJson(response,s );
//		} catch (Exception e) {// TODO
//			AjaxUtils.ajaxJsonErrorMessage(response, "查询失败!");
//			e.printStackTrace();
//		}
//		return null;
//	}
//	
//	@RequestMapping(value = "/txtrace/list/id")
//	public String executesd1(ModelMap model, @RequestBody String content,
//			HttpServletRequest request, HttpServletResponse response) {
//		try {
//			JSONObject jsonObj = JSONObject.fromObject(content);
//			LogTxTrace k =  logTxTraceRService.loadByGuid(JSONUtils.getStr(jsonObj, "id"));
//			JSONObject jo = JSONObject.fromObject(k,jsonConfig);
//			
//			//JnlCustService jcs = jnlRService.createCustomService("", "") ; 
//			
//			AjaxUtils.ajaxJson(response, jo.toString() );
//		} catch (Exception e) {// TODO
//			AjaxUtils.ajaxJsonErrorMessage(response, "查询失败!");
//			e.printStackTrace();
//		}
//		return null;
//	}
//	
//	/**
//	 * 每个controller定义自己的返回信息变量
//	 */
//	private Map<String, Object> responseMsg ;
//	@Override
//	public Map<String, Object> getResponseMessage() {
//		if( null == responseMsg ){
//			responseMsg = new HashMap<String, Object> () ;
//		}
//		return responseMsg ;
//	}
//}
